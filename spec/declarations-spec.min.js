"use strict";var mockery=require("mockery");mockery.enable(),mockery.registerAllowables(["../src/js/converter/declarations.js","console","./utils.js","./domutils.js","console","../bower_components/mensch"]);var cheerio=require("cheerio");mockery.registerMock("jquery",cheerio),mockery.registerMock("jsep",require("../bower_components/jsep/src/jsep.js")),mockery.registerMock("mensch/lib/parser.js",function(){var e=require("../bower_components/mensch").parse;return e.apply(e,arguments)});var elaborateDeclarations=require("../src/js/converter/declarations.js"),templateUrlConverter=function(e){return"."+e},mockedBindingProvider=function(e,r){return"$"+e+"["+r+"]"};describe("Style declaration processor",function(){it("should not loose simple properties after a -ko-property",function(){var e,r,t;e=require("mensch/lib/parser.js")("#{\ncolor: red; -ko-color: @color; background-color: white}",{comments:!0,position:!0}),r=e.stylesheet.rules[0].declarations,t=elaborateDeclarations(void 0,r,templateUrlConverter,mockedBindingProvider),expect(t).toEqual("virtualAttrStyle: 'color: '+($color[undefined]())+'; '+'background-color: white;'+''"),e=require("mensch/lib/parser.js")("#{\ncolor: red; background-color: white; -ko-color: @color}",{comments:!0,position:!0}),r=e.stylesheet.rules[0].declarations,t=elaborateDeclarations(void 0,r,templateUrlConverter,mockedBindingProvider),expect(t).toEqual("virtualAttrStyle: 'color: '+($color[undefined]())+'; '+'background-color: white;'+''")}),it("should not mix virtualStyle and virtualAttrStyle bindings",function(){var e,r,t;e=require("mensch/lib/parser.js")("#{\n-ko-bind-text: @['Pulsante']; -ko-font-family: @face; -ko-color: @color; -ko-font-size: @[size]px; -ko-background-color: @buttonColor; padding-left: 5px; -ko-border-radius: @[radius]px; padding: 5px;}",{comments:!0,position:!0}),r=e.stylesheet.rules[0].declarations,t=elaborateDeclarations(void 0,r,templateUrlConverter,mockedBindingProvider),expect(t).toEqual("virtualAttrStyle: 'padding-left: 5px; '+'padding: 5px;'+'', text: 'Pulsante', virtualStyle: { fontFamily: $face[undefined](), color: $color[undefined](), fontSize: $size[undefined]()+'px', backgroundColor: $buttonColor[undefined](), borderRadius: $radius[undefined]()+'px' }")}),it("should mantain spaces and ; when removing/replacing declarations",function(){var e;e=elaborateDeclarations("color: red; -ko-color: @color; background-color: white",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("color: red; color: <!-- ko text: $color[red]() -->red<!-- /ko -->; background-color: white"),e=elaborateDeclarations("color: red;-ko-color: @color;background-color: white",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("color: red;color: <!-- ko text: $color[red]() -->red<!-- /ko -->;background-color: white")}),it("should correctly parse multiline declarations",function(){var e;e=elaborateDeclarations("	color: red;\n	-ko-color: @color;\n	background-color: white\n",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("	color: red;\n	color: <!-- ko text: $color[red]() -->red<!-- /ko -->;\n	background-color: white\n")}),it("should support modifiers",function(){var e;e=elaborateDeclarations("width: 10%; -ko-width: @[mywidth]%",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("width: 10%; width: <!-- ko text: $mywidth[10]()+'%' -->10%<!-- /ko -->"),e=elaborateDeclarations("width: 10px; -ko-width: @[mywidth]px",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("width: 10px; width: <!-- ko text: $mywidth[10]()+'px' -->10px<!-- /ko -->"),e=elaborateDeclarations("src: url('path'); -ko-src: url('@myurl')",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("src: url('.path'); src: <!-- ko text: 'url(\\''+$myurl[.path]()+'\\')' -->url('.path')<!-- /ko -->"),e=elaborateDeclarations('src: url("path"); -ko-src: url("@myurl")',void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual('src: url(".path"); src: <!-- ko text: \'url("\'+$myurl[.path]()+\'")\' -->url(".path")<!-- /ko -->'),e=elaborateDeclarations("src: url(path); -ko-src: url(@myurl)",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("src: url(.path); src: <!-- ko text: 'url('+$myurl[.path]()+')' -->url(.path)<!-- /ko -->")}),it("should be able to remove display: none",function(){var e;e=elaborateDeclarations("a: 1; display: none; b: 2",void 0,templateUrlConverter,mockedBindingProvider,void 0,void 0,!0),expect(e).toEqual("a: 1; ; b: 2")}),it("should support composed properties and hardcoded values",function(){var e;e=elaborateDeclarations("border: 1px 2px 3px 4px; -ko-border: @border1 @border2 3px @border4",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("border: 1px 2px 3px 4px; border: <!-- ko text: $border1[1px]()+' '+$border2[2px]()+' 3px '+$border4[4px]() -->1px 2px 3px 4px<!-- /ko -->")}),it("should support conditional properties",function(){var e,r,t;r=require("mensch/lib/parser.js")("#{\ncolor: red; -ko-color: @mycolor; -ko-color-if: mycondition}",{comments:!0,position:!0}),t=r.stylesheet.rules[0].declarations,e=elaborateDeclarations(void 0,t,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("virtualAttrStyle: 'color: '+(($mycondition[undefined]()) ? $mycolor[undefined]() : null)+';'+''"),e=elaborateDeclarations("color: red; -ko-color: @mycolor; -ko-color-if: mycondition",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("color: red; color: <!-- ko text: ($mycondition[undefined]()) ? $mycolor[red]() : null -->red<!-- /ko -->; ")}),it("should support simple expressions in conditional properties",function(){var e,r,t;r=require("mensch/lib/parser.js")("#{\ncolor: red; -ko-color: @mycolor; -ko-color-if: mycondition gt 1 and mycondition lt 3}",{comments:!0,position:!0}),t=r.stylesheet.rules[0].declarations,e=elaborateDeclarations(void 0,t,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("virtualAttrStyle: 'color: '+(((($mycondition[undefined]() > 1) && ($mycondition[undefined]() < 3))) ? $mycolor[undefined]() : null)+';'+''"),e=elaborateDeclarations("color: red; -ko-color: @mycolor; -ko-color-if: mycondition gt 1 and mycondition lt 3",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("color: red; color: <!-- ko text: ((($mycondition[undefined]() > 1) && ($mycondition[undefined]() < 3))) ? $mycolor[red]() : null -->red<!-- /ko -->; "),e=elaborateDeclarations("color: red; -ko-color: @mycolor; -ko-color-ifnot: mycondition gt 1 and mycondition lt 3",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual("color: red; color: <!-- ko text: !((($mycondition[undefined]() > 1) && ($mycondition[undefined]() < 3))) ? $mycolor[red]() : null -->red<!-- /ko -->; "),e=elaborateDeclarations('color: red; -ko-color: @mycolor; -ko-color-ifnot: mycondition eq "ciao ciao"',void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual('color: red; color: <!-- ko text: !(($mycondition[undefined]() == "ciao ciao")) ? $mycolor[red]() : null -->red<!-- /ko -->; ')}),it("should support complex expressions in conditional properties",function(){var e;e=elaborateDeclarations('color: red; -ko-color: @mycolor; -ko-color-ifnot: mycondition eq "ciao ciao" and mycondition neq "miao" or mycondition lte 1 or Color.lighter(mycondition, "#00000") gte "#CCCCCC"',void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual('color: red; color: <!-- ko text: !((((($mycondition[undefined]() == "ciao ciao") && ($mycondition[undefined]() != "miao")) || ($mycondition[undefined]() <= 1)) || (Color.lighter($mycondition[undefined](), "#00000") >= "#CCCCCC"))) ? $mycolor[red]() : null -->red<!-- /ko -->; '),e=elaborateDeclarations('color: red; -ko-color: @mycolor; -ko-color-ifnot: !mycondition || true ? myobj.color : "red"',void 0,templateUrlConverter,mockedBindingProvider),expect(e).toEqual('color: red; color: <!-- ko text: !(((!$mycondition[undefined]() || true) ? $myobj.color[undefined]() : "red")) ? $mycolor[red]() : null -->red<!-- /ko -->; ')}),it("should expect defaults",function(){var e,r;try{e=elaborateDeclarations("-ko-color: red",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Cannot find default/);try{e=elaborateDeclarations("color: red blue; -ko-color: @a @b @c @d",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Cannot find default/)}),it("should raise an exception on unknown tokens in condition expressions",function(){var e,r;try{e=elaborateDeclarations("color: red; -ko-color: @mycolor; -ko-color-if: mycondition gt 1 xor mycondition lt 3",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Syntax error/);try{e=elaborateDeclarations("color: red; -ko-color: @mycolor; -ko-color-if: mycondition gtn 1",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Syntax error/)}),it("should raise an exception on element styles applied with no element",function(){var e,r;try{e=elaborateDeclarations("-ko-attr-href: @myhref",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Attributes and bind declarations/);try{e=elaborateDeclarations("-ko-bind-text: @mytext",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Attributes and bind declarations/)}),it("should raise an exception on unbalanced string values",function(){var e,r;try{e=elaborateDeclarations('color: red; -ko-color: @mycolor; -ko-color-if: mycondition eq "ciao ciao"a',void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Syntax error/)}),it("should raise an exception when -if and -ifnot are used on the same property",function(){var e,r;try{e=elaborateDeclarations('color: red; -ko-color-ifnot: mycondition; -ko-color: @mycolor; -ko-color-if: mycondition eq "ciao ciao"',void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Unexpected error/)}),it("should raise errors on bad modifiers",function(){var e,r;try{e=elaborateDeclarations("src: url('path'); -ko-src: @[myurl!mymod]",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/Syntax error /)}),it("should raise errors on missing default value",function(){var e,r;try{e=elaborateDeclarations("-ko-color: @mycolor",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Cannot find default/)}),it("should not alter the result when no -ko declarations are used",function(){var e;e=elaborateDeclarations("width: 10%; width: 20%",void 0,templateUrlConverter,mockedBindingProvider),expect(e).toBe(null)}),it("should raise errors on unexpected default values when using modifiers",function(){var e,r;try{e=elaborateDeclarations("width: 10%; -ko-width: @[mywidth]px",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Cannot find default/);try{e=elaborateDeclarations("width: 10px; -ko-width: @[mywidth]%",void 0,templateUrlConverter,mockedBindingProvider)}catch(t){r=t}expect(e).toEqual(void 0),expect(r).toMatch(/^Cannot find default/)}),it("should camel case stles but not attributes",function(){var e,r=cheerio.load('<a data-attribute="ciao"></a>');e=elaborateDeclarations("-ko-attr-data-attribute: @myvalue; background-color: red; -ko-background-color: @mycolor",void 0,templateUrlConverter,mockedBindingProvider,r("a")[0]),expect("virtualAttr: { 'data-attribute': $myvalue[ciao]() }, virtualAttrStyle: 'background-color: '+($mycolor[red]())+';'+''").toEqual(r("a").attr("data-bind"))})});