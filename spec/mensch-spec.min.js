"use strict";var mockery=require("mockery");mockery.enable(),mockery.registerAllowables(["../src/js/converter/declarations.js","console","./utils.js","./domutils.js","console","../bower_components/mensch"]);var currentDocument;mockery.registerMock("jquery",function(){return currentDocument.apply(currentDocument,arguments)}),mockery.registerMock("mensch/lib/parser.js",function(){var e=require("../bower_components/mensch").parse;return e.apply(e,arguments)});var utils=require("../src/js/converter/utils.js");describe("Mensch parser",function(){it("should return expected positions",function(){var e=" \nselector \n{\n color: red\n;	}\n selector2{a:b}",r=require("mensch/lib/parser.js")(e,{comments:!0,position:!0}),t=r.stylesheet.rules[0].declarations;expect(r.stylesheet.rules[0].position).toEqual({start:{line:2,col:1},end:{line:3,col:1}}),expect(t[0].position).toEqual({start:{line:4,col:2},end:{line:5,col:1}}),expect(r.stylesheet.rules[1].position).toEqual({start:{line:6,col:2},end:{line:6,col:11}});var a=e;a=utils.removeStyle(a,r.stylesheet.rules[1].position.start,r.stylesheet.rules[1].position.end,0,0,0,"CCC"),a=utils.removeStyle(a,t[0].position.start,t[0].position.end,0,0,0,"BBB"),a=utils.removeStyle(a,r.stylesheet.rules[0].position.start,r.stylesheet.rules[0].position.end,0,0,0,"AAA"),expect(a).toEqual(" \nAAA{\n BBB;	}\n CCC{a:b}")}),it("should return expected positions 2",function(){var e="a { b: c; d: e }\na { b: c; d: e }",r=require("mensch/lib/parser.js")(e,{comments:!0,position:!0}),t=r.stylesheet.rules[0].declarations;expect(r.stylesheet.rules[0].position).toEqual({start:{line:1,col:1},end:{line:1,col:3}}),expect(t[0].position).toEqual({start:{line:1,col:5},end:{line:1,col:9}}),expect(r.stylesheet.rules[1].position).toEqual({start:{line:2,col:1},end:{line:2,col:3}});var a=e;a=utils.removeStyle(a,t[1].position.start,t[1].position.end,0,0,0,"D:E"),a=utils.removeStyle(a,t[0].position.start,t[0].position.end,0,0,0,"B:C"),a=utils.removeStyle(a,r.stylesheet.rules[0].position.start,r.stylesheet.rules[0].position.end,0,0,0,"A"),expect(a).toEqual("A{ B:C; D:E}\na { b: c; d: e }")})});