"use strict";var cssParse=require("mensch/lib/parser.js"),console=require("console"),converterUtils=require("./utils.js"),elaborateDeclarations=require("./declarations.js"),_processStyleSheetRules_processBlockDef=function(e,t){for(var i,r,a,o=0;o<t.length;o++)if("rule"==t[o].type){for(var n=t[o].selectors,s=!1,l=!1,d=0;d<n.length;d++)n[d].match(/:preview$/)?l=!0:s=!0;if(l&&s)throw console.log("cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs ",n),"Cannot mix selectors type (:preview and declarations) in @supports -ko-blockdefs";if(!l&&!s)throw console.log("cannot find known selectors in @supports -ko-blockdefs ",n),"Cannot find known selectors in @supports -ko-blockdefs";if(s){i="",r={},a=t[o].declarations;for(var c=0;c<a.length;c++)"property"==a[c].type&&("label"==a[c].name?r.name=a[c].value:"context"==a[c].name?r.contextName=a[c].value:"properties"==a[c].name?i=a[c].value:"theme"==a[c].name?r.globalStyle="_theme_."+a[c].value:"themeOverride"==a[c].name?r.themeOverride="true"==String(a[c].value).toLowerCase():r[a[c].name]=a[c].value);for(var u=0;u<n.length;u++)e(n[u],i,r)}if(l)for(var v=0;v<n.length;v++){var f=n[v].substr(0,n[v].indexOf(":")),p=t[o].declarations;e(f,void 0,{previewBindings:p})}}},processStylesheetRules=function(e,t,i,r,a,o,n,s){var l=e,d=null;if("undefined"==typeof t){var c=cssParse(e,{comments:!0,position:!0});if("stylesheet"!=c.type||"undefined"==typeof c.stylesheet)throw console.log("unable to process styleSheet",c),"Unable to parse stylesheet";t=c.stylesheet.rules}for(var u,v=t.length-1;v>=0;v--){if("supports"==t[v].type&&"-ko-blockdefs"==t[v].name)_processStyleSheetRules_processBlockDef(r,t[v].rules),l=converterUtils.removeStyle(l,t[v].position.start,d,0,0,0,"");else if("media"==t[v].type||"supports"==t[v].type)l=processStylesheetRules(l,t[v].rules,i,r,a,o,n,s);else if("comment"==t[v].type);else if("rule"==t[v].type){for(var f=t[v].selectors,p="",h=null,m=0;m<f.length;m++){p.length>0&&(p+=", ");var g=f[m].match(/\[data-ko-block=([^ ]*)\]/);if(null!==g){if(null!==h&&h!=g[1])throw"Found multiple block-match attribute selectors: cannot translate it ("+h+" vs "+g[1]+")";h=g[1]}p+="<!-- ko text: templateMode =='wysiwyg' ? '#main-wysiwyg-area ' : '' --><!-- /ko -->"+f[m]}if(h){var b="<!-- ko foreach: $root.findObjectsOfType($data, '"+h+"') -->",y="<!-- /ko -->",w=d,k=" ";t[v].declarations.length>0&&(t[v].declarations[0].position.start.line!=t[v].position.end.line&&(k="\n"+new Array(t[v].position.start.col).join(" ")),w=t[v].declarations[t[v].declarations.length-1].position.end),null===w?l+=k+y:l=w==d?converterUtils.removeStyle(l,w,d,0,0,0,k+y):converterUtils.removeStyle(l,w,d,0,0,0,k+"}"+k+y),p=b+k+p.replace(new RegExp("\\[data-ko-block="+h+"\\]","g"),"<!-- ko text: '#'+id() -->"+h+"<!-- /ko -->"),r(h,"",{contextName:"block"})}var x=h?h:s;u=i.bind(this,x,"");var C=elaborateDeclarations(l,t[v].declarations,o,u);null!==C&&(l=C),l=converterUtils.removeStyle(l,t[v].position.start,t[v].position.end,0,0,0,p)}else console.log("Unknown rule type",t[v].type,"while parsing <style> rules");d=t[v].position.start}return l};module.exports=processStylesheetRules;